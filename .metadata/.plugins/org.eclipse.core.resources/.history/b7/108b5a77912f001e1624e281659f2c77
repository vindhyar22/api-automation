package tests;
import org.testng.Assert;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import static io.restassured.RestAssured.*;

public class GKR_code_delivery {
	
	
	String dtauthloginkey;
	String dtauthloginkey2;
	String sessionId;
	String propertyId;
	
	@BeforeClass
    public void setUp() {
        // Base URI
        RestAssured.baseURI = "https://api-qa.dthreaddev.com";
    }
	
	@Test
    public void testAuth() {
        String requestBody = "{ \"email\": \"vindhyar@byteridge.com\", \"password\": \"Pass@12345\" }";

        Response response =
            given()
                .accept(ContentType.JSON)
                .contentType(ContentType.JSON)
                .body(requestBody)
            .when()
                .post("/api/sessions/auth")
            .then()
                .statusCode(200) // Validate the status code is 200 (OK)
                .extract().response();
        
        
        
        dtauthloginkey = response.jsonPath().getString("data.userData.id");
        dtauthloginkey2 = response.jsonPath().getString("data.userData.organizationId");
        
        Assert.assertFalse(dtauthloginkey.isEmpty(), "ID is empty or null");
        Assert.assertFalse(dtauthloginkey2.isEmpty(), "Organization ID is empty or null");

    }
	
	  @Test
	    public void testVerify2FA() {
	        

	        // Request Body
	        String requestBody = "{ \"code\": \"QWERTY\" }";

	        // Send POST request and get the response
	        Response response =
	            given()
	                .accept(ContentType.JSON)
	                .header("dt-auth-login-key", dtauthloginkey)
	                .header("dt-auth-login-key-2", dtauthloginkey2)
	                .contentType(ContentType.JSON)
	                .body(requestBody)
	            .when()
	                .post("/api/sessions/verify-2fa")
	            .then()
	            	.statusCode(200)
	                .extract().response();
	        
	        sessionId = response.jsonPath().getString("data.sessionToken");
	        System.out.println(sessionId);
	        
	        Assert.assertFalse(sessionId.isEmpty(), "sessionId is empty or null");
	    }
	  
	  @Test
	    public void testProperties() {
	       // String requestBody = "{ \"email\": \"vindhyar@byteridge.com\", \"password\": \"Pass@12345\" }";

	        Response response =
	            given()
	                .accept(ContentType.JSON)
	                .contentType(ContentType.JSON)
	                //.body(requestBody)
	            .when()
	                .get("/api/properties/")
	            .then()
	                .statusCode(200) // Validate the status code is 200 (OK)
	                .extract().response();
	        
	        System.out.println(response.getBody().toString());
	        
	       // propertyId = response.jsonPath().getString("data.userData.id");
	       
	        
	       // Assert.assertFalse(dtauthloginkey.isEmpty(), "ID is empty or null");
	     

	    }
	
}
